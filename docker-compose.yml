version: '3'

networks:
  log_network:
    driver: bridge

services:
  consuming: # node.js app for kafka consumers
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "3000:3000"
    environment:
      INFLUXDB_HOST: influxdb
      KAFKA_HOST: kafka
      AWS_ACCESS_KEY_ID: ''
      AWS_SECRET_ACCESS_KEY: ''
      AWS_S3_BUCKET_NAME: ''
      QUEUE_MAX_SIZE: ''
    depends_on:
      - rsyslog
      - zookeeper
      - kafka
      - influxdb
    networks:
      - log_network

  rsyslog:
    image: jumanjiman/rsyslog   #rsyslog on linux container
    environment:
      KAFKA_HOST: kafka
    ports:
      - "514:514"
      - "10514:10514"
    networks:
      - log_network

  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: "8092"
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "8092:8092"
    networks:
      - log_network

  kafka:
    image: confluentinc/cp-kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:8092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "jsonlogs:1:1,test3:3:1" #only works with wurstmeister image, for now keep as notes.
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    networks:
      - log_network

  influxdb:
    image: influxdb
    ports:
      - "8086:8086"
    networks:
      - log_network
    environment:
      INFLUXDB_DB: "crato_logs"

  chronograf:
    image: chronograf
    environment:
      INFLUXDB_HOST: influxdb
    ports:
       - '8888:8888'
    networks:
      - log_network
    depends_on:
      - consuming
      - influxdb
